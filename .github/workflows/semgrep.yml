on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/semgrep.yml
  schedule:
    - cron: 14 2 * * *

jobs:
  Testing-unit:
    name: Testing Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checking Repository
        uses: actions/checkout@v4

      - name: Checking Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Checking Depedencies with trivy
        uses: aquasecurity/trivy-action@0.31.0
        continue-on-error: true
        with:
          scan-type: fs
          input: .
          format: json
          output: trivy-report.json

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Pytest
        id: pytest-step
        continue-on-error: true
        run: |
          pip install pytest
          pytest app.py

  SAST:
    name: semgrep
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    container:
      image: semgrep/semgrep

    steps:
      - uses: actions/checkout@v4
      - name: semgrep scan
        run: semgrep --config=.semgrep.yml --jsarif --output semgrep-report.sarif

      - name: upload semgrep report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.sarif
  DAST:
    name: DAST with Nuclei
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: Testing-unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Flask
        run: pip install flask
      - name: Run Flask app in background
        run: |
          nohup python app.py &
          sleep 30
        env:
          APP_URL: ${{ env.APP_URL || 'http://localhost:5000' }}
      - name: Run Nuclei Scan
        run: |
          echo "${{ env.APP_URL }}" > targets.txt
          docker run --rm \
          -v ${{ github.workspace }}:/nuclei projectdiscovery/nuclei \
          -t vulnerabilities -t cves -severity critical,high,medium \
          -u ${{ env.APP_URL }} \
          -o /nuclei/nuclei-results.txt || true
      - name: Conditionally upload results
        if: always()
        run: |
          if [ -s nuclei-results.txt ]; then
            echo "Vulnerabilities found, uploading artifact..."
            echo "upload=true" >> $GITHUB_ENV
          else
            echo "No vulnerabilities found, skipping upload."
            echo "upload=false" >> $GITHUB_ENV
          fi
      - name: Upload Nuclei Report
        if: env.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-report
          path: nuclei-results.txt
